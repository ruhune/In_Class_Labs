#include <bits/stdc++.h>
using namespace std;

// Number of vertices in the graph
#define V 6

// Function to find the vertex with the minimum key value
int minKey(int key[], bool mstSet[])
{
    // Initialize min value
    int min = INT_MAX, min_index;

    // Find the vertex with the minimum key value among the vertices not yet included in the MST
    for (int v = 0; v < V; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

// Function to print the Minimum Spanning Tree (MST)
void printMST(int parent[], int graph[V][V])
{
    cout << "Edge \tWeight\n";
    for (int i = 1; i < V; i++)
        cout << parent[i] << " - " << i << " \t"
             << graph[i][parent[i]] << " \n";
}

// Function to find the Minimum Spanning Tree (MST) of the graph using Prim's algorithm
void primMST(int graph[V][V])
{
    int parent[V];    // Array to store the parent of each vertex in the MST
    int key[V];       // Array to store the key value of each vertex
    bool mstSet[V];   // Array to keep track of vertices included in the MST

    // Initialize all keys as INFINITE and mstSet[] as false
    for (int i = 0; i < V; i++)
        key[i] = INT_MAX, mstSet[i] = false;

    // Start with the first vertex
    key[0] = 0;
    parent[0] = -1;

    // Construct the MST with V-1 edges
    for (int count = 0; count < V - 1; count++) {
        // Find the vertex with the minimum key value among the vertices not yet included in the MST
        int u = minKey(key, mstSet);

        // Include the selected vertex in the MST
        mstSet[u] = true;

        // Update the key values and parent of the adjacent vertices of the selected vertex
        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == false && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    // Print the constructed MST
    printMST(parent, graph);
}

int main()
{
    int graph[V][V] = { { 0, 3, 0, 0, 0, 1 },
                        { 3, 0, 2, 1, 10, 0 },
                        { 0, 2, 0, 3, 0, 5 },
                        { 0, 1, 3, 0, 5, 0 },
                        { 0, 10, 0, 5, 0, 4 },
                        { 1, 0, 5, 0, 4, 0 } };

    // Find and print the Minimum Spanning Tree (MST) of the graph
    primMST(graph);

    return 0;
}
